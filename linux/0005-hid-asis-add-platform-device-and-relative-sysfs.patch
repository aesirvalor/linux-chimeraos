From 52b602368605611f60e60841def70da4282d0a5d Mon Sep 17 00:00:00 2001
From: Denis <benato.denis96@gmail.com>
Date: Sat, 4 Nov 2023 16:22:10 +0100
Subject: [PATCH 5/5] hid-asis: add platform device and relative sysfs

---
 drivers/hid/hid-asus.c | 193 ++++++++++++++++++++++++-----------------
 1 file changed, 115 insertions(+), 78 deletions(-)

diff --git a/drivers/hid/hid-asus.c b/drivers/hid/hid-asus.c
index 16bf3512a43b..76920f0a15fc 100644
--- a/drivers/hid/hid-asus.c
+++ b/drivers/hid/hid-asus.c
@@ -27,6 +27,7 @@
 #include <linux/hid.h>
 #include <linux/module.h>
 #include <linux/sysfs.h>
+#include <linux/platform_device.h>
 #include <linux/platform_data/x86/asus-wmi.h>
 #include <linux/input/mt.h>
 #include <linux/usb.h> /* For to_usb_interface for T100 touchpad intf check */
@@ -97,11 +98,10 @@ MODULE_DESCRIPTION("Asus HID Keyboard and TouchPad");
 
 /*
  * USB buffers to be used in a control transfer to make the joystick change buttons mode and scancodes
- * 0 is default
- * 1 is game mode m1f17_m2f18
- * 2 is mouse mode
+ * 0 is default (game_mode with back buttons sending F17 and F18 insted of F15 for both as when unconfigured)
+ * 1 is mouse mode: back buttons still are F17 and F18
  */
-static const unsigned char ally_mode_switch_commands[][23][64] = {
+static const u8 rc71l_mode_switch_commands[][23][64] = {
 	{
 		{
 			0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@@ -200,9 +200,9 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x02, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8F, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
@@ -230,13 +230,13 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-		0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x04, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-		0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x05, 0x04, 0x00, 0x64, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
@@ -244,7 +244,7 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 	},
 	{
 		{
-			0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
@@ -256,8 +256,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x02, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x99, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -268,8 +268,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x02, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x9B, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -280,8 +280,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x02, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -292,8 +292,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -304,8 +304,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x02, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x76, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -316,8 +316,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x02, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x96, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -352,8 +352,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x88, 0x0D, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -384,7 +384,7 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 	},
 	{
 		{
-			0x5A, 0xD1, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
@@ -396,8 +396,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x02, 0x00, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x99, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x01, 0x2C, 0x01, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0A, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8C, 0x88, 0x76, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -408,8 +408,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x02, 0x00, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x02, 0x00, 0x9B, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x02, 0x2C, 0x01, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x23, 0x00, 0x00, 0x00, 0x01, 0x0C, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x0D, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -420,8 +420,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x02, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
+			0x5A, 0xD1, 0x02, 0x03, 0x2C, 0x01, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -432,8 +432,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x02, 0x00, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01,
+			0x5A, 0xD1, 0x02, 0x04, 0x2C, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -444,8 +444,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x02, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x76, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x05, 0x2C, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x05, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x31, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -456,8 +456,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x02, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x02, 0x00, 0x96, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x06, 0x2C, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x4D, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -480,9 +480,9 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x30, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x5A, 0xD1, 0x02, 0x08, 0x2C, 0x02, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x02, 0x00, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8F, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
@@ -492,8 +492,8 @@ static const unsigned char ally_mode_switch_commands[][23][64] = {
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
 		{
-			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x04, 0x00, 0x00, 0x00, 0x00, 0x02, 0x88, 0x0D, 0x00, 0x00, 0x00,
-			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02,
+			0x5A, 0xD1, 0x02, 0x09, 0x2C, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0E, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
 		},
@@ -544,15 +544,17 @@ struct asus_touchpad_info {
 };
 
 enum rc71l_controller_mode {
-	rc71l_controller_mode_default,
-	rc71l_controller_mode_game_mode,
-	rc71l_controller_mode_mouse_mode,
+	rc71l_gamepad_mode,
+	rc71l_mouse_mode,
+	rc71l_macro_mode,
 };
 
 struct asus_rc71l {
 	unsigned int usb_pipe;
 
-	struct mutex mutex; /* Mutex that protexts everything below it */
+	struct platform_device *mcu_dev;
+
+	struct mutex mutex; /* Mutex that protects everything below it */
 
 	enum rc71l_controller_mode mode;
 
@@ -736,28 +738,26 @@ static int rc71l_mode_change(struct hid_device * hdev, enum rc71l_controller_mod
 
 	int ret = 0;
 
-	unsigned char ally_packets_group = 0;
+	size_t packets_group = 0;
 	switch (new_mode) {
-		case rc71l_controller_mode_default:
-			ally_packets_group = 0;
+		case rc71l_gamepad_mode:
+			packets_group = 0;
 			break;
-		
-		case rc71l_controller_mode_game_mode:
-			ally_packets_group = 1;
+
+		case rc71l_mouse_mode:
+			packets_group = 1;
 			break;
 
-		case rc71l_controller_mode_mouse_mode:
-			ally_packets_group = 2;
+		case rc71l_macro_mode:
+			packets_group = 2;
 			break;
 
 		default:
-			// same as default mode
-			ally_packets_group = 0;
-			break;
+			return -EINVAL;
 	}
 
 	for (int i = 0; (i < 23) && (ret == 0); ++i) {
-		ret = rc71l_usb_write(hdev, (const void*)&ally_mode_switch_commands[ally_packets_group][i][0], 64);
+		ret = rc71l_usb_write(hdev, (const void*)&rc71l_mode_switch_commands[packets_group][i][0], 64);
 		if (ret > 0) {
 			hid_err(hdev, "Ally controller mode switch %d/23 error %d\n", i, ret);
 			goto rc71l_mode_change_err;
@@ -774,35 +774,61 @@ static int rc71l_mode_change(struct hid_device * hdev, enum rc71l_controller_mod
 	return ret;
 }
 
-static ssize_t current_mode_show(struct device *raw_dev, struct device_attribute *attr, char *buf) {
-	struct hid_device *hdev = to_hid_device(raw_dev);
+static ssize_t mode_show(struct device *raw_dev, struct device_attribute *attr, char *buf) {
+	struct platform_device *const pdev = to_platform_device(raw_dev);
+	struct hid_device *const hdev = platform_get_drvdata(pdev);
+	if (hdev == NULL) {
+		return -EINVAL;
+	}
 
-	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+	struct asus_drvdata *const drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
 	if (drvdata == NULL) {
 		return -EINVAL;
 	}
 
-	struct asus_rc71l *rc71l_drvdata = drvdata->rc71l_data;
+	struct asus_rc71l *const rc71l_drvdata = drvdata->rc71l_data;
 	if (rc71l_drvdata == NULL) {
 		return -EINVAL;
 	}
 
 	mutex_lock(&rc71l_drvdata->mutex);
-	int res = sysfs_emit(buf, "%d\n", (int)rc71l_drvdata->mode);
-	mutex_unlock(&rc71l_drvdata->mutex);
+	int current_mode = 0;
+	switch (rc71l_drvdata->mode) {
+		case rc71l_gamepad_mode:
+			current_mode = 0;
+			break;
+
+		case rc71l_mouse_mode:
+			current_mode = 1;
+			break;
+
+		case rc71l_macro_mode:
+			current_mode = 2;
+			break;
+
+		default:
+			mutex_unlock(&rc71l_drvdata->mutex);
+			return -EINVAL;
+	}
 
-	return res;
+	mutex_unlock(&rc71l_drvdata->mutex);
+	
+	return sysfs_emit(buf, "%d\n", (int)current_mode);
 }
 
-static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
-	struct hid_device *hdev = to_hid_device(raw_dev);
+static ssize_t mode_store(struct device *raw_dev, struct device_attribute *attr, const char *buf, size_t count) {
+	struct platform_device *const pdev = to_platform_device(raw_dev);
+	struct hid_device *const hdev = platform_get_drvdata(pdev);
+	if (hdev == NULL) {
+		return -EINVAL;
+	}
 
-	struct asus_drvdata *drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
+	struct asus_drvdata *const drvdata = (struct asus_drvdata*)hid_get_drvdata(hdev);
 	if (drvdata == NULL) {
 		return -EINVAL;
 	}
 
-	struct asus_rc71l *rc71l_drvdata = drvdata->rc71l_data;
+	struct asus_rc71l *const rc71l_drvdata = drvdata->rc71l_data;
 	if (rc71l_drvdata == NULL) {
 		return -EINVAL;
 	}
@@ -816,19 +842,19 @@ static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute
 	switch (val) {
 		case 0:
 			mutex_lock(&rc71l_drvdata->mutex);
-			res = rc71l_mode_change(hdev, rc71l_controller_mode_default);
+			res = rc71l_mode_change(hdev, rc71l_gamepad_mode);
 			mutex_unlock(&rc71l_drvdata->mutex);
 			break;
 		
 		case 1:
 			mutex_lock(&rc71l_drvdata->mutex);
-			res = rc71l_mode_change(hdev, rc71l_controller_mode_game_mode);
+			res = rc71l_mode_change(hdev, rc71l_mouse_mode);
 			mutex_unlock(&rc71l_drvdata->mutex);
 			break;
 
 		case 2:
 			mutex_lock(&rc71l_drvdata->mutex);
-			res = rc71l_mode_change(hdev, rc71l_controller_mode_mouse_mode);
+			res = rc71l_mode_change(hdev, rc71l_macro_mode);
 			mutex_unlock(&rc71l_drvdata->mutex);
 			break;
 
@@ -839,12 +865,10 @@ static ssize_t switch_mode_store(struct device *raw_dev, struct device_attribute
 	return count;
 }
 
-DEVICE_ATTR_RO(current_mode);
-DEVICE_ATTR_WO(switch_mode);
+DEVICE_ATTR_RW(mode);
 
 static struct attribute *rc71l_controller_attrs[] = {
-	&dev_attr_current_mode.attr,
-	&dev_attr_switch_mode.attr,
+	&dev_attr_mode.attr,
 	NULL
 };
 
@@ -1700,6 +1724,9 @@ static int __maybe_unused asus_suspend(struct hid_device *hdev, struct pm_messag
 	if (rc71l_drvdata != NULL) {
 		mutex_lock(&rc71l_drvdata->mutex);
 		// TODO: send ABOIRT_PIPE here
+		usb_control_msg(dev, rc71l_drvdata->usb_pipe, 0x09, 0x21, 0x035A, 0x0002, (void*)&rc71l_drvdata->usb_out_buf[0], 64, 250);
+		
+
 		mutex_unlock(&rc71l_drvdata->mutex);
 	}
 
@@ -1876,7 +1903,7 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 		struct usb_device *dev = interface_to_usbdev(intf);
 		
 		// default controller mode
-		drvdata->rc71l_data->mode = rc71l_controller_mode_default;
+		drvdata->rc71l_data->mode = rc71l_gamepad_mode;
 
 		// usb_device and endpoint
 		drvdata->rc71l_data->usb_pipe = usb_sndctrlpipe(dev, 0);
@@ -1891,7 +1918,15 @@ static int asus_probe(struct hid_device *hdev, const struct hid_device_id *id)
 			goto err_stop_hw;
 		}
 
-		ret = devm_device_add_group(&hdev->dev, &ally_controller_attr_group);
+		drvdata->rc71l_data->mcu_dev = platform_device_register_simple("mcu", 0, NULL, 0);
+		if (IS_ERR(drvdata->rc71l_data->mcu_dev)) {
+			hid_err(hdev, "Error registering MCU platform device: %ld\n", PTR_ERR(drvdata->rc71l_data->mcu_dev));
+			goto err_stop_hw;
+		}
+
+		platform_set_drvdata(drvdata->rc71l_data->mcu_dev, hdev);
+
+		ret = devm_device_add_group(&drvdata->rc71l_data->mcu_dev->dev, &ally_controller_attr_group);
 		if (ret != 0) {
 			hid_err(hdev, "Asus ROG Ally [RC71L] error registering attr group: %d\n", ret);
 			goto err_stop_hw;
@@ -1919,6 +1954,8 @@ static void asus_remove(struct hid_device *hdev)
 
 	struct asus_rc71l *rc71l_drvdata = drvdata->rc71l_data;
 	if (rc71l_drvdata != NULL) {
+		platform_device_unregister(rc71l_drvdata->mcu_dev);
+
 		mutex_lock(&rc71l_drvdata->mutex);
 		// TODO: perform cleanup operations
 		mutex_unlock(&rc71l_drvdata->mutex);
-- 
2.42.0

